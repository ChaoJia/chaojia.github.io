<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>graphics on Chao Jia</title><link>https://chaojia.github.io/categories/graphics/</link><description>Recent content in graphics on Chao Jia</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Mon, 22 Aug 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://chaojia.github.io/categories/graphics/index.xml" rel="self" type="application/rss+xml"/><item><title>A Basic Vulkan Renderer</title><link>https://chaojia.github.io/posts/22-08-22-vulkan-basic-renderer/</link><pubDate>Mon, 22 Aug 2022 00:00:00 +0000</pubDate><guid>https://chaojia.github.io/posts/22-08-22-vulkan-basic-renderer/</guid><description>
&lt;p>As part of the effort to get myself familiar with Vulkan, I developed a real-time renderer featuring global illumination with RTX technique &lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>. Aside from Dynamic Diffuse Global Illumination (DDGI) &lt;sup id="fnref:2">&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref">2&lt;/a>&lt;/sup> &lt;sup id="fnref:3">&lt;a href="#fn:3" class="footnote-ref" role="doc-noteref">3&lt;/a>&lt;/sup>, ray-traced soft shadow and specular reflections with spatial temporal-denoising (SVGF &lt;sup id="fnref:4">&lt;a href="#fn:4" class="footnote-ref" role="doc-noteref">4&lt;/a>&lt;/sup>), I've also tried out some other interesting ideas.&lt;/p></description></item><item><title>Vertex Attribute Interpolation and Analytical Derivatives</title><link>https://chaojia.github.io/posts/21-11-29-vertex-attrib-interp/</link><pubDate>Mon, 29 Nov 2021 00:00:00 +0000</pubDate><guid>https://chaojia.github.io/posts/21-11-29-vertex-attrib-interp/</guid><description>
&lt;p>For visibility buffer rendering &lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup> &lt;sup id="fnref:2">&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref">2&lt;/a>&lt;/sup>, we cannot rely on the hardware rasterization and built-in functions in fragment shader to do the vertex attribute interpolation and implicitly compute partial derivatives (i.e. &lt;code>dFdx&lt;/code> and &lt;code>dFdy&lt;/code> in &lt;em>glsl&lt;/em>). This article describes the math behind a simple way to analytically compute these values, and provides formulas that can be easily translated to &lt;a href="https://gitlab.com/chao-jia/spock/-/blob/edc9e132e47c6696f2cc08002368224536107bbd/assets/glsl/basic_test/lighting_utils.h.glsl#L332">shader code&lt;/a> &lt;sup id="fnref:3">&lt;a href="#fn:3" class="footnote-ref" role="doc-noteref">3&lt;/a>&lt;/sup>.
Although there are some existing implementations, they are &lt;a href="#pitfalls-existing-implementations">not quite satisfactory&lt;/a>, which motivates me to do my own math.&lt;/p></description></item></channel></rss>